<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="/js-files/common.js"></script>
    <link href="/css-files/email-builder.css" rel="stylesheet" type="text/css">
    <link href="/css-files/box.css" rel="stylesheet" type="text/css">
    <link href="/css-files/widgit.css" rel="stylesheet" type="text/css">
    <!-- <link rel="stylesheet" href="css-files/email-builder-drag.css"> -->
    <!-- <script src="https://kit.fontawesome.com/a076d05399.js"></script> -->

    <!-- <script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.5/jquery.min.js"></script>
    <script>
        function ctc() {
            var x = $("#div1").html();
            console.log(x);
            navigator.clipboard.writeText(x).then(function () {
                console.log('copied');
                /* clipboard successfully set */
            }, function () {
                console.log('not copied');
                /* clipboard write failed */
            });
        }
        function allowDrop(ev) {
            ev.preventDefault();
        }

        function drag(ev) {
            ev.dataTransfer.setData("text", ev.target.id);
        }
        function drag_t(ev) {
            if (ev.target.id == 'text-area2') {
                ev.dataTransfer.setData("text", 'normal-text');
            } else if (ev.target.id == 'image') {
                ev.dataTransfer.setData("text", 'image-div');
            }
        }

        function drop(ev) {
            ev.preventDefault();
            var data = ev.dataTransfer.getData("text");
            /* If you use DOM manipulation functions, their default behaviour it not to 
               copy but to alter and move elements. By appending a ".cloneNode(true)", 
               you will not move the original element, but create a copy. */
            var nodeCopy = document.getElementById(data).cloneNode(true);
            var new_id = "appenden-text_area";
            nodeCopy.id = new_id; /* We cannot use the same ID */
            ev.target.appendChild(nodeCopy);
            document.getElementById(new_id).className = "text-field text-center";
        }
    </script> -->

    <script src="/tinymce.min.js" referrerpolicy="origin"></script>
    <script>
        function get_editor_content() {
            console.log(tinyMCE.activeEditor.getContent());
        }
        tinymce.init({
            selector: '#mytextarea'
        });
    </script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/css/bootstrap.min.css"
        integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">

    <title>campaigns ejs</title>
</head>

<body>
    <div class="conatainer">
        <div class="side_bar  flex-column bg-dark">
            <%- include('../common/sidebar')%>
        </div>

        <div class="main_area">
            <div class="main_header">
                <%- include('../common/user_details')%>
                    <div class="row m-4 mt-5 h1">New Campaigns</div>
            </div>
            <div class="work_area">
                <div class="work_container m-4 p-4">
                    <h1>TinyMCE Quick Start Guide</h1>
                    <form method="post">
                        
                 <textarea name="email_body" id="mytextarea">crate your email body here with tynimce </textarea>
                    </form>
                </div>
                <button onclick="get_editor_content()">Get content</button>
            </div>

        </div>
    </div>
</body>

</html>